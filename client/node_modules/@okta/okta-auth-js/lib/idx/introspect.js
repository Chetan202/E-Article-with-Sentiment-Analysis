/*!
 * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import idx from '@okta/okta-idx-js';
import { getOAuthDomain } from '../oidc';
import { IDX_API_VERSION } from '../constants';
export function introspect(authClient, options) {
    return __awaiter(this, void 0, void 0, function* () {
        let rawIdxResponse;
        // try load from storage first
        rawIdxResponse = authClient.transactionManager.loadIdxResponse();
        // call idx.introspect if no existing idx response available in storage
        if (!rawIdxResponse) {
            const version = IDX_API_VERSION;
            const domain = getOAuthDomain(authClient);
            rawIdxResponse = yield idx.introspect(Object.assign({ domain, version }, options));
        }
        return idx.makeIdxState(rawIdxResponse);
    });
}
