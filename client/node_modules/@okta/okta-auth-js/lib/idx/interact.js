/*!
 * Copyright (c) 2021, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import idx from '@okta/okta-idx-js';
import { getTransactionMeta, saveTransactionMeta } from './transactionMeta';
import { getOAuthBaseUrl } from '../oidc';
function getResponse(meta) {
    return {
        meta,
        interactionHandle: meta.interactionHandle,
        state: meta.state
    };
}
// Begin or resume a transaction. Returns an interaction handle
export function interact(authClient, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const meta = yield getTransactionMeta(authClient);
        // Saved transaction, return meta
        if (meta.interactionHandle) {
            return getResponse(meta);
        }
        // These properties are always loaded from meta (or calculated fresh)
        const { codeChallenge, codeChallengeMethod } = meta;
        // These properties are defined by global configuration
        const { clientId, redirectUri } = authClient.options;
        // These properties can be set in options, but also have a default value in global configuration.
        const state = options.state || authClient.options.state || meta.state;
        const scopes = options.scopes || authClient.options.scopes || meta.scopes;
        const baseUrl = getOAuthBaseUrl(authClient);
        return idx.interact({
            // OAuth
            clientId,
            baseUrl,
            scopes,
            state,
            redirectUri,
            // PKCE
            codeChallenge,
            codeChallengeMethod
        }).then(interactionHandle => {
            const newMeta = Object.assign(Object.assign({}, meta), { interactionHandle, state, scopes });
            // Save transaction meta so it can be resumed
            saveTransactionMeta(authClient, newMeta);
            return getResponse(newMeta);
        });
    });
}
