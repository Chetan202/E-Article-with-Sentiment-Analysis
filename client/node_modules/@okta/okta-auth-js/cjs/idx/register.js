"use strict";

exports.register = register;

var _run = require("./run");

var _transactionMeta = require("./transactionMeta");

var _startTransaction = require("./startTransaction");

var _remediators = require("./remediators");

var _flowMonitors = require("./flowMonitors");

var _errors = require("../errors");

var _types = require("../types");

const flow = {
  'select-enroll-profile': _remediators.SelectEnrollProfile,
  'enroll-profile': _remediators.EnrollProfile,
  'authenticator-enrollment-data': _remediators.AuthenticatorEnrollmentData,
  'select-authenticator-enroll': _remediators.SelectAuthenticatorEnroll,
  'enroll-authenticator': _remediators.EnrollAuthenticator,
  'skip': _remediators.Skip
};

async function register(authClient, options) {
  // Only check at the beginning of the transaction
  if (!(0, _transactionMeta.transactionMetaExist)(authClient)) {
    const {
      enabledFeatures
    } = await (0, _startTransaction.startTransaction)(authClient, options);

    if (enabledFeatures && !enabledFeatures.includes(_types.IdxFeature.REGISTRATION)) {
      const error = new _errors.AuthSdkError('Registration is not supported based on your current org configuration.');
      return {
        status: _types.IdxStatus.FAILURE,
        error
      };
    }
  }

  const flowMonitor = new _flowMonitors.RegistrationFlowMonitor();
  return (0, _run.run)(authClient, { ...options,
    flow,
    flowMonitor
  });
}
//# sourceMappingURL=register.js.map